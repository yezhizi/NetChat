// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_meta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_meta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_meta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_meta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace ntc {
class PBMETA;
class PBMETADefaultTypeInternal;
extern PBMETADefaultTypeInternal _PBMETA_default_instance_;
}  // namespace ntc
PROTOBUF_NAMESPACE_OPEN
template<> ::ntc::PBMETA* Arena::CreateMaybeMessage<::ntc::PBMETA>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ntc {

enum Type : int {
  TYPE_UNKNOWN = 0,
  SIGNUP = 1,
  LOGIN = 2,
  LOGOUT = 3,
  MESSAGE = 4,
  FILE = 5,
  ERROR = 6,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = TYPE_UNKNOWN;
constexpr Type Type_MAX = ERROR;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const std::string& Type_Name(Type value);
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return Type_Name(static_cast<Type>(enum_t_value));
}
bool Type_Parse(
    const std::string& name, Type* value);
enum Code : int {
  CODE_UNKNOWN = 0,
  OK = 1,
  REQUEST = 2,
  SINGUP_EXEIST = 3,
  SINGUP_SUCCESS = 4,
  LOGIN_NOT_EXIST = 5,
  LOGIN_WRONG_PASSWORD = 6,
  LOGIN_SUCCESS = 7,
  LOGOUT_SUCCESS = 8,
  Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Code_IsValid(int value);
constexpr Code Code_MIN = CODE_UNKNOWN;
constexpr Code Code_MAX = LOGOUT_SUCCESS;
constexpr int Code_ARRAYSIZE = Code_MAX + 1;

const std::string& Code_Name(Code value);
template<typename T>
inline const std::string& Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Code_Name.");
  return Code_Name(static_cast<Code>(enum_t_value));
}
bool Code_Parse(
    const std::string& name, Code* value);
// ===================================================================

class PBMETA :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:ntc.PBMETA) */ {
 public:
  PBMETA();
  virtual ~PBMETA();

  PBMETA(const PBMETA& from);
  PBMETA(PBMETA&& from) noexcept
    : PBMETA() {
    *this = ::std::move(from);
  }

  inline PBMETA& operator=(const PBMETA& from) {
    CopyFrom(from);
    return *this;
  }
  inline PBMETA& operator=(PBMETA&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PBMETA& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PBMETA* internal_default_instance() {
    return reinterpret_cast<const PBMETA*>(
               &_PBMETA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PBMETA& a, PBMETA& b) {
    a.Swap(&b);
  }
  inline void Swap(PBMETA* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PBMETA* New() const final {
    return CreateMaybeMessage<PBMETA>(nullptr);
  }

  PBMETA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PBMETA>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const PBMETA& from);
  void MergeFrom(const PBMETA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PBMETA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ntc.PBMETA";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSizeFieldNumber = 5,
    kTypeFieldNumber = 1,
    kCodeFieldNumber = 2,
    kDstFieldNumber = 3,
    kSrcFieldNumber = 4,
  };
  // repeated int32 data_size = 5;
  int data_size_size() const;
  void clear_data_size();
  ::PROTOBUF_NAMESPACE_ID::int32 data_size(int index) const;
  void set_data_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data_size();

  // .ntc.Type type = 1;
  void clear_type();
  ::ntc::Type type() const;
  void set_type(::ntc::Type value);

  // .ntc.Code code = 2;
  void clear_code();
  ::ntc::Code code() const;
  void set_code(::ntc::Code value);

  // int32 dst = 3;
  void clear_dst();
  ::PROTOBUF_NAMESPACE_ID::int32 dst() const;
  void set_dst(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 src = 4;
  void clear_src();
  ::PROTOBUF_NAMESPACE_ID::int32 src() const;
  void set_src(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ntc.PBMETA)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_size_;
  mutable std::atomic<int> _data_size_cached_byte_size_;
  int type_;
  int code_;
  ::PROTOBUF_NAMESPACE_ID::int32 dst_;
  ::PROTOBUF_NAMESPACE_ID::int32 src_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PBMETA

// .ntc.Type type = 1;
inline void PBMETA::clear_type() {
  type_ = 0;
}
inline ::ntc::Type PBMETA::type() const {
  // @@protoc_insertion_point(field_get:ntc.PBMETA.type)
  return static_cast< ::ntc::Type >(type_);
}
inline void PBMETA::set_type(::ntc::Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ntc.PBMETA.type)
}

// .ntc.Code code = 2;
inline void PBMETA::clear_code() {
  code_ = 0;
}
inline ::ntc::Code PBMETA::code() const {
  // @@protoc_insertion_point(field_get:ntc.PBMETA.code)
  return static_cast< ::ntc::Code >(code_);
}
inline void PBMETA::set_code(::ntc::Code value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ntc.PBMETA.code)
}

// int32 dst = 3;
inline void PBMETA::clear_dst() {
  dst_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBMETA::dst() const {
  // @@protoc_insertion_point(field_get:ntc.PBMETA.dst)
  return dst_;
}
inline void PBMETA::set_dst(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dst_ = value;
  // @@protoc_insertion_point(field_set:ntc.PBMETA.dst)
}

// int32 src = 4;
inline void PBMETA::clear_src() {
  src_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBMETA::src() const {
  // @@protoc_insertion_point(field_get:ntc.PBMETA.src)
  return src_;
}
inline void PBMETA::set_src(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  src_ = value;
  // @@protoc_insertion_point(field_set:ntc.PBMETA.src)
}

// repeated int32 data_size = 5;
inline int PBMETA::data_size_size() const {
  return data_size_.size();
}
inline void PBMETA::clear_data_size() {
  data_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PBMETA::data_size(int index) const {
  // @@protoc_insertion_point(field_get:ntc.PBMETA.data_size)
  return data_size_.Get(index);
}
inline void PBMETA::set_data_size(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:ntc.PBMETA.data_size)
}
inline void PBMETA::add_data_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_size_.Add(value);
  // @@protoc_insertion_point(field_add:ntc.PBMETA.data_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PBMETA::data_size() const {
  // @@protoc_insertion_point(field_list:ntc.PBMETA.data_size)
  return data_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PBMETA::mutable_data_size() {
  // @@protoc_insertion_point(field_mutable_list:ntc.PBMETA.data_size)
  return &data_size_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ntc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ntc::Type> : ::std::true_type {};
template <> struct is_proto_enum< ::ntc::Code> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_meta_2eproto
